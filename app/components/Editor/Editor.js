import { useContext, useEffect, useState } from 'react'
import Head from 'next/head'
import dynamic from 'next/dynamic'
import { TextIconSpacing } from "@react-md/icon"
import { Button } from "@react-md/button"
import { CircularProgress, getProgressA11y } from "@react-md/progress"
import { useToggle } from "@react-md/utils"
import { SaveSVGIcon } from "@react-md/material-icons"
import { TextField } from "@react-md/form"
import { useDispatch, useSelector } from "react-redux"
import { clear } from "../../../features/article/articleSlice"

const EditorJs = dynamic(() => import('react-editor-js'), { ssr: false })

let editorInstance

const Editor = (props) => {
  const { article, isSuccess } = useSelector((state) => state.article)
  const [title, setTitle] = useState('')
  const [description, setDescription] = useState('')
  const [editorTools, setEditorTools] = useState()
  const [loading, enable, disable] = useToggle(false)
  const [body, setBody] = useState({ ...article?.blogData })
  const id = "button-with-progress"
  const progressId = `${id}-loading`
  const dispatch = useDispatch()

  useEffect(() => {
    setBody(article?.blogData)
    console.log(body)
  }, [isSuccess])

  const onSaveHandler = async (editorInstance) => {
    enable()
    try {
      const blogData = await editorInstance.save()
      if (!title || title === '')
        throw new Error('Title cannot be empty. Please enter title')
      if (!blogData.blocks[0])
        throw new Error('Blog cannot be empty. Please enter some data')
      props.onSave(blogData, title, description)
      disable()
    } catch (err) {
      console.log(err)
    }
  }

  let editorComponent
  if (!editorTools) editorComponent = 'Loading...'
  else {
    editorComponent = (
      <EditorJs
        i18n={{
          messages: {
            toolNames: {
              "Text": "Текст",
              "Table": "Таблица",
              "Link": "Ссылка",
              "Heading": "Заголовок",
              "List": "Список",
              "Warning": "Блок внимание",
              "Code": "Код",
              "Delimiter": "Разделитель",
              "Image": "Изображение",
              "Raw HTML": "HTML",
              "Checklist": "Список чекбоксов"

            },
            "tools": {
              "Warning": {
                "Title": "Название",
                "Message": "Сообщение"
              },
              "link": {
                "Link": "Вставьте ссылку"
              }
            },
            blockTunes: {
              "delete": {
                "Delete": "Удалить (нажмите 2 раза)"
              },
              "moveUp": {
                "Move up": "Переместить вверх",
              },
              "moveDown": {
                "Move down": "Переместить вниз"
              }
            },
            ui: {
              toolbar: {
                toolbox: {
                  "Add": "Добавить",
                },
                "Click to tune": "Нажмите, чтобы изменить"
              },

            }
          }
        }}

        data={body}
        instanceRef={(instance) => (editorInstance = instance)}
        tools={editorTools}
        placeholder={`Давайте создадим какую-то запись!`}
        enableReInitialize={true}
        key={body?.time}
      />
    )
  }


  useEffect(() => {
    const importConstants = async () => {
      const tools = (await import('../../components/Editor/EditorConstants'))
        .default
      setEditorTools(tools)
    }

    importConstants()

    if (loading) {
      enable()
    }
  }, [loading])

  return (
    <div className="overflow-y-scroll">
      {body && <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
        <Head>
          <title>Create Blog</title>
          <meta name='description' content='Generated by create next app' />
        </Head>


        <div className="flex justify-center items-center flex-col">
          <TextField
            idprefix="title-field"
            onChange={(event) => setTitle(event.target.value)}
            value={title}
            theme="underline"
            label="Заголовок"
            width="600"
          />


          <TextField
            idprefix="desc-field"
            onChange={(event) => setDescription(event.target.value)}
            value={description}
            theme="underline"
            label="Краткое описание"
          />
        </div>

        <div className="editor-wrap" style={{ margin: '10px 10px' }}>
          {editorComponent}
        </div>

        <div className="flex justify-around" style={{ width: '30%', textAlign: 'center' }}>
          <Button
            {...getProgressA11y(progressId, loading)}
            onClick={() => onSaveHandler(editorInstance)}
            theme={loading ? "disabled" : "primary"}
            themeType="contained"
            style={{ backgroundColor: 'red' }}
          >
            <TextIconSpacing
              icon={
                loading ? (
                  <CircularProgress id={progressId} centered={false} />
                ) :
                  (
                    <SaveSVGIcon />
                  )
              }
              iconAfter
            >
              Отменить
            </TextIconSpacing>
          </Button>
          <Button
            {...getProgressA11y(progressId, loading)}
            onClick={() => onSaveHandler(editorInstance)}
            theme={loading ? "disabled" : "primary"}
            themeType="contained"
            style={{ backgroundColor: 'green' }}
          >
            <TextIconSpacing
              icon={
                loading ? (
                  <CircularProgress id={progressId} centered={false} />
                ) :
                  (
                    <SaveSVGIcon />
                  )
              }
              iconAfter
            >
              Сохранить
            </TextIconSpacing>
          </Button>
        </div>
      </div>}
    </div>
  )
}

export default Editor
